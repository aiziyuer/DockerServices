server {
    listen       80;
    server_name  _;
    
    access_log  logs/web.access.log;
    error_log   logs/web.error.log;
    
    location = /redis {
        # internal;
        set_unescape_uri $key $arg_key;
        redis2_query get $key;
        redis2_pass redis:6379;
    }

    location / {
        set $upstream "";

        access_by_lua '
            
            -- 根据访问的host:port来查询对应的后端服务
            local key = "backend:"..ngx.var.http_host..":"..ngx.var.server_port
            if not key then
                ngx.log(ngx.ERR, "no user-agent found")
                return ngx.exit(400)
            end

            -- 初始化redis连接
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeout(1000) -- 1 second

            -- 这里的"11.11.11.3"是在compose文件中redis服务的ip, 是定死的, 避免走DNS的解析降低性能
            local ok, err = red:connect("11.11.11.3", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return ngx.exit(500)
            end

            -- 获取后端的信息(ip:port的形式)
            local backend, err = red:get(key)
            if not backend then
                ngx.log(ngx.ERR, "failed to get redis key: ", err)
                return ngx.exit(500)
            end

            -- 返回后端信息
            if backend == ngx.null then
                ngx.log(ngx.ERR, "no backend found for key ", key)
                return ngx.exit(400)
            end

            -- 回写变量
            ngx.var.upstream = backend
        ';

        proxy_buffering             off;
        proxy_set_header            Host $host;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect              off;
        proxy_connect_timeout       10;
        proxy_send_timeout          30;
        proxy_read_timeout          30;
        proxy_pass                  $scheme://$upstream;

    }

}