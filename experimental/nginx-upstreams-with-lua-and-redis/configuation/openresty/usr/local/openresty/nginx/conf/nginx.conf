#user  nobody;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  _;
        
        #access_log  logs/host.access.log  main;
        
        location = /redis {
            internal;
            set_unescape_uri $key $arg_key;
            redis2_query get $key;
            redis2_pass redis:6379;
        }

        location / {
          set $upstream "";
          rewrite_by_lua '
            -- load global route cache into current request scope
            -- by default vars are not shared between requests
            local routes = _G.routes

            -- setup routes cache if empty
            if routes == nil then
              routes = {}
              ngx.log(ngx.ALERT, "Route cache is empty.")
            end

            -- try cached route first
            local route = routes[ngx.var.http_host]
            if route == nil then

              local res = ngx.location.capture(
                  "/redis", { args = { key = ngx.var.http_host } }
              )

              print("key: ", key)

              if res.status ~= 200 then
                  ngx.log(ngx.ERR, "redis server returned bad status: ",
                      res.status)
                  ngx.exit(res.status)
              end

              if not res.body then
                  ngx.log(ngx.ERR, "redis returned empty body")
                  ngx.exit(500)
              end

              local parser = require "redis.parser"
              local typ = nil
              route, typ = parser.parse_reply(res.body)
              if typ ~= parser.BULK_REPLY or not server then
                  ngx.log(ngx.ERR, "bad redis response: ", res.body)
                  ngx.exit(500)
              end
              
            end

            -- fallback to redis for lookups
            if route ~= nil then
              ngx.var.upstream = route
              routes[ngx.var.http_host] = route
              _G.routes = routes
            else
              ngx.exit(ngx.HTTP_NOT_FOUND)
            end
          ';

          proxy_buffering             off;
          proxy_set_header            Host $host;
          proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_redirect              off;
          proxy_connect_timeout       10;
          proxy_send_timeout          30;
          proxy_read_timeout          30;
          proxy_pass                  http://$upstream;

        }

    }

}